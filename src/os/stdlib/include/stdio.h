#ifndef _STDIO_H
#define _STDIO_H
//------------------------------------------------------------------------------------------
//				Includes
//------------------------------------------------------------------------------------------
#include <stddef.h>
#include <stdarg.h>
#include <limits.h>

// Defines remaining types and macros like FILE struct, FILENAME_MAX, BUFSIZ, EOF and fpos_t
#include "../../include/vfs/vfs.h"
#include "../../include/stream/stream.h"

//------------------------------------------------------------------------------------------
//				Constants
//------------------------------------------------------------------------------------------

#define FOPEN_MAX SIZE_MAX    // As the files are saved in a dynamic tree structure there is no clear limit
#define TMP_MAX SIZE_MAX      // Maximum number of unique filenames generated by tmpnam
#define L_tmpnam FILENAME_MAX // Needed array size to hold the result of tmpnam

//------------------------------------------------------------------------------------------
//				Types
//------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------
//				Variables
//------------------------------------------------------------------------------------------

extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;

//------------------------------------------------------------------------------------------
//				Public Function
//------------------------------------------------------------------------------------------

FILE *fopen(const char *filename, const char *mode);
FILE *freopen(const char *filename, const char *mode, FILE *stream);
int fclose(FILE *stream);
int fflush(FILE *stream);
void setbuf(FILE *stream, char *buffer);
int setvbuf(FILE *stream, char *buffer, int mode, size_t size);

size_t fread(void *buffer, size_t size, size_t count, FILE *stream);
size_t fwrite(const void *buffer, size_t size, size_t count, FILE *stream);

int fgetc(FILE *stream);
int getc(FILE *stream);
char *fgets(char *str, int count, FILE *stream);

int fputc(int ch, FILE *stream);
int putc(int ch, FILE *stream);
int fputs(const char *str, FILE *stream);

int getchar();
char *gets(char *str);
char *gets_s(char *str, size_t n);

int putchar(int ch);
int puts(const char *str);
int ungetc(int ch, FILE *stream);

int scanf(const char *format, ...);
int fscanf(FILE *stream, const char *format, ...);
int sscanf(const char *buffer, const char *format, ...);

int vscanf(const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);
int vsscanf(const char *buffer, const char *format, va_list ap);

int printf(const char *format, ...);
int fprintf(FILE *stream, const char *format, ...);
int sprintf(char *buffer, const char *format, ...);
int snprintf(char *buffer, size_t bufsz, const char *format, ...);

int vprintf(const char *format, va_list ap);
int vfprintf(FILE *stream, const char *format, va_list ap);
int vsprintf(char *buffer, const char *format, va_list ap);
int vsnprintf(char *buffer, size_t bufsz, const char *format, va_list ap);

long ftell(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fseek(FILE *stream, long offset, int origin);
int fsetpos(FILE *stream, const fpos_t *pos);
void rewind(FILE *stream);

void clearerr(FILE *stream);
int feof(FILE *stream);
int ferror(FILE *stream);
void perror(const char *s);

int remove(const char *fname);
int rename(const char *old_filename, const char *new_filename);
FILE *tmpfile();
char *tmpnam(char *filename);

#endif //_STDIO_H
